(* python-bsdl-parser
 *
 * Copyright (c) 2016, Forest Crossman <cyrozap@gmail.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *)

(* IEEE Std 1149.1-2013, Annex B *)

@@ignorecase :: True
@@eol_comments :: /--.*?$/

(* B.8.1 *)
bsdl_description = "entity" component_name "is"
    generic_parameter
    logical_port_description
    standard_use_statement
    {use_statement}
    component_conformance_statement
    device_package_pin_mappings
    [grouped_port_identification]
    scan_port_identification
    [compliance_enable_description]
    instruction_register_description
    [optional_register_description]
    [register_access_description]
    boundary_scan_register_description
    [runbist_description]
    [intest_description]
    [system_clock_description]
    {register_mnemonics_description}
    {register_fields_description}
    {register_assembly_description}
    {register_constraints_description}
    {register_association_description}
    {power_port_association_description}
    {bsdl_extensions}
    [design_warning]
    "end" component_name semicolon ;

component_name = vhdl_identifier ;

(* B.8.2 *)
generic_parameter = generic_default | generic_no_default ;
generic_default = "generic" left_paren "PHYSICAL_PIN_MAP" colon
    "string" right_paren semicolon ;
generic_no_default = "generic" left_paren "PHYSICAL_PIN_MAP" colon
    "string" colon_equal default_device_package_type right_paren semicolon ;
default_device_package_type = quote pin_mapping_name quote ;

(* B.8.3 *)
logical_port_description = "port" left_paren pin_spec
    { semicolon pin_spec } right_paren semicolon ;
pin_spec = identifier_list colon pin_type port_dimension ;
identifier_list = port_name { comma port_name} ;
pin_type = "in" | "out" | "buffer" | "inout" | "LINKAGE_INOUT" |
    "LINKAGE_BUFFER" | "LINKAGE_IN" | "LINKAGE_OUT" | "LINKAGE_MECHANICAL" |
    "POWER_0" | "POWER_POS" | "POWER_NEG" | "VREF_IN" | "VREF_OUT" ;
port_dimension = "bit" | bit_vector_spec ;
bit_vector_spec  = "bit_vector" left_paren range right_paren ;
range = up_range | down_range ;
up_range = integer1 "to" integer2 ;
down_range = integer2 "downto" integer1 ;
integer1 = integer ;
integer2 = integer ;

(* B.8.4 *)
standard_use_statement = "use" standard_package_name period "all" semicolon ;
standard_package_name = "STD_1149_1_1990" | "STD_1149_1_1994" |
    "STD_1149_1_2001" | "STD_1149_1_2013" ;

(* B.8.5 *)
use_statement = "use" user_package_name period "all" semicolon ;
user_package_name = vhdl_identifier ;

(* B.8.6 *)
component_conformance_statement = "attribute" "COMPONENT_CONFORMANCE" "of"
    component_name colon "entity" "is" conformance_string semicolon ;
conformance_string = quote conformance_identification quote ;
conformance_identification = "STD_1149_1_1990" | "STD_1149_1_1993" |
    "STD_1149_1_2001" | "STD_1149_1_2013" ;

(* B.8.7 *)
device_package_pin_mappings = pin_map_statement pin_mappings ;
pin_map_statement = "attribute" "PIN_MAP" "of" component_name colon "entity" "is"
    "PHYSICAL_PIN_MAP" semicolon ;
pin_mappings = pin_mapping { pin_mapping } ;
pin_mapping = "constant" pin_mapping_name colon "PIN_MAP_STRING" ":="
    map_string semicolon ;
pin_mapping_name = vhdl_identifier ;
map_string = quote port_map { comma port_map } quote ;
port_map = port_name colon pin_or_list ;
pin_or_list = pin_desc | pin_list ;
pin_list = left_paren pin_desc { comma pin_desc} right_paren ;
pin_desc = pin_ID | "OPEN" | "TIE0" | "TIE1" ;
pin_ID = vhdl_identifier | integer ;

(* B.8.8 *)
grouped_port_identification = "attribute" "PORT_GROUPING" "of"
    component_name colon "entity" "is" group_table_string semicolon ;
group_table_string = quote group_table quote ;
group_table = twin_group_entry { comma twin_group_entry } ;
twin_group_entry = twin_group_type left_paren twin_group_list right_paren ;
twin_group_type = "DIFFERENTIAL_VOLTAGE" | "DIFFERENTIAL_CURRENT" ;
twin_group_list = twin_group { comma twin_group } ;
twin_group = left_paren representative_port comma associated_port right_paren ;
representative_port = port_ID ;
associated_port = port_ID ;

(* B.8.9 *)
scan_port_identification = scan_port_stmt { scan_port_stmt } ;
scan_port_stmt = TCK_stmt | TDI_stmt | TMS_stmt | TDO_stmt | TRST_stmt ;
TCK_stmt = "attribute" "TAP_SCAN_CLOCK" "of" port_ID colon "signal" "is"
    left_paren clock_record right_paren semicolon ;
TDI_stmt = "attribute" "TAP_SCAN_IN" "of" port_ID colon "signal" "is" "true" semicolon ;
TMS_stmt = "attribute" "TAP_SCAN_MODE" "of" port_ID colon "signal" "is" "true" semicolon ;
TDO_stmt = "attribute" "TAP_SCAN_OUT" "of" port_ID colon "signal" "is" "true" semicolon ;
TRST_stmt = "attribute" "TAP_SCAN_RESET" "of" port_ID colon "signal" "is" "true" semicolon ;
clock_record = real comma halt_state_value ;
halt_state_value = "LOW" | "BOTH" ;

(* B.8.10 *)
compliance_enable_description = "attribute" "COMPLIANCE_PATTERNS" "of"
    component_name colon "entity" "is" compliance_pattern_string semicolon ;
compliance_pattern_string = quote left_paren compliance_port_list right_paren
    left_paren pattern_list right_paren quote ;
compliance_port_list = port_ID { comma port_ID } ;
pattern_list = pattern { comma pattern } ;

(* B.8.11 *)
instruction_register_description =
    instruction_length_stmt
    instruction_opcode_stmt
    instruction_capture_stmt
    [instruction_private_stmt] ;
instruction_length_stmt = "attribute" "INSTRUCTION_LENGTH" "of" component_name
    colon "entity" "is" integer semicolon ;
instruction_opcode_stmt = "attribute" "INSTRUCTION_OPCODE" "of" component_name
    colon "entity" "is" opcode_table_string semicolon ;
instruction_capture_stmt = "attribute" "INSTRUCTION_CAPTURE" "of" component_name
    colon "entity" "is" pattern_list_string semicolon ;
instruction_private_stmt = "attribute" "INSTRUCTION_PRIVATE" "of" component_name
    colon "entity" "is" instruction_list_string semicolon ;
opcode_table_string = quote opcode_description { comma opcode_description } quote ;
opcode_description = instruction_name left_paren opcode_list right_paren ;
opcode_list = opcode { comma opcode } ;
opcode = pattern ;
pattern_list_string = quote opcode_list quote ;
instruction_list_string = quote instruction_list quote ;
instruction_list = instruction_name { comma instruction_name } ;
